<pre class='metadata'>
Title: Using Enum
Status: D
Audience: CWG
Editor: Gašper Ažman <gasper.azman@gmail.com>
Editor: Jonathan Müller <jonathan.mueller@foonathan.net>
Shortname: D1099
Abstract: Class enums are restricted namespaces. Let's extend the using declaration to them.
Group: WG21
Date: 2019-07-15
Markup Shorthands: markdown yes
Revision: 5
ED: https://github.com/atomgalaxy/using-enum/using-enum.bs
</pre>

<style>
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}

.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
</style>

Revision History {#history}
================
- r1: Typos. Changed target from LEWG to EWG.
- r2: Added FAQ and wording, and extended to regular enums.
- r3: Added examples. Nothing of substance changed.
- r4: Clarified that `using enum enum_name` is supposed to have semantics as if the names were declared in the local scope as opposed to the way *using-directive* does it, as per EWG poll. Added Eric Niebler's example for using this feature to enable ADL-only functions on exposed enumerators (to support `std::begin` being a CPO). Added editorial notes for renaming the current Using Directive to Using Namespace Directive on Richard Smith's request.
- r5: Applied fixes from Jens Maurer: added feature test macro, a number of technical wording fixes, added example, renamed from *using-enum-directive* to *using-enum-declaration*. Removed editorial notes for renaming *using-namespace-directive* since they are now not needed.
    - r5, post round 1 of CWG review: added clashing example, added "completely specified" wording to [dcl.enum], added wording that named enum is completely-specified.
    - r5, post round 1.5 of CWG review: used wording from CWG, split example in [enum.udecl].
    - r5, post round 2 of CWG review: added example in namespace.udir.

Status of this paper {#status}
====================

This paper has been approved by EWG in Kona 2019 and sent to Core with the ship vehicle of C++20.


Motivation {#motivation}
==========

> The single biggest deterrent to use of scoped enumerations is the inability to associate them with a *using directive*.
>
> &nbsp;&nbsp;&nbsp;&nbsp;&mdash; Dan Saks

Consider an enum class:

```cpp
enum class rgba_color_channel { red, green, blue, alpha };
```

Currently, a switch using this enum looks as follows:

```cpp
std::string_view to_string(rgba_color_channel channel) {
  switch (channel) {
    case rgba_color_channel::red:   return "red";
    case rgba_color_channel::green: return "green";
    case rgba_color_channel::blue:  return "blue";
    case rgba_color_channel::alpha: return "alpha";
  }
}
```

The necessary repetition of the `enum class` name reduces legibility by introducing noise in contexts where said name is obvious.

To eliminate the noise penalty for introducing long (but descriptive) `enum class` names, this paper proposes that the statement

```cpp
using enum rgba_color_channel;
```

introduce the enumerator identifiers into the local scope, so they may be referred to unqualified.

Furthermore, the syntax

```cpp
using rgba_color_channel::red;
```

should bring the identifier `red` into the local scope, so it may be used unqualified.

The above example would then be written as

```cpp
std::string_view to_string(rgba_color_channel channel) {
  switch (my_channel) {
    using enum rgba_color_channel;
    case red:   return "red";
    case green: return "green";
    case blue:  return "blue";
    case alpha: return "alpha";
  }
}
```


Rationale {#rationale}
=========

Consistency {#consistency}
-----------

`enum class`es and `enum`s are not classes - they are closer to namespaces comprising `static constexpr` inline variables. The familiar `using` syntax that works for namespaces should therefore apply to them as well, in some fashion. Because they are closed, small, and do not contain overload sets, we can do better than the *using-directive* does for namespaces, and actually get the identifiers into the local scope, which is what the user expects.


Better Identifiers {#betterids}
------------------

The introduction of this feature would allow better naming of enumerations. Currently, enums are named with as short an identifier as possible, often to the point of absurdity, when they are reduced to completely nondescriptive abbreviations that only hint at their proper meaning. (Just what does `zfqc::add_op` really mean?)

With this feature, identifiers become available to unqualified lookup in local contexts where their source is obvious, giving control of lookup style back to the user of the enum, instead of baking lookup semantics into the type of the enum.


Evidence of Need {#need}
----------------

At a casual search, we were able to locate this
[thread on stackoverflow](https://stackoverflow.com/questions/9450338/equivalent-of-using-namespace-x-for-scoped-enumerations).

Anecdotally, 100% of people the authors have shown this to (~30) at CppCon have displayed a very enthusiastic response, with frequent comments of "I'd use enum classes but they are too verbose, this solves my problem!"


Proposal {#proposal}
========

Syntax: `using ENUM_ID::IDENTIFIER` {#using-id}
---------------------------

We propose to allow the syntax of

```cpp
using ENUM_ID::IDENTIFIER
```

to introduce the `IDENTIFIER` into the local namespace, aliasing `ENUM_ID::IDENTIFIER`.

This would mirror the current syntax for introducing namespaced names into the current scope.

Note: this does not conflict with [[P0945R0]], because that paper only deals with the syntax `using name = id-expression`, which duplicates the enumerator name.


Syntax: `using enum IDENTIFIER` {#using-enum-id}
-----------------------

We propose the addition of a new `using enum` statement:

```cpp
using enum IDENTIFIER;
```

This makes all the enumerators of the enum available for lookup in the local scope. It's almost as if it expanded to a series of `using ENUM::ENUMERATOR` statements for every enumerator in the enum, but doesn't actually introduce any declarations into the local scope.

(Note: this was changed from "works as a using-directive" to the current way with a strong direction poll from EWG.)


Examples {#examples}
====================

Strongly typed enums with global identifiers {#strong-enums-global-ids}
-----------------------------------------------------------------------

This proposal lets you make strongly-typed enums still export their identifiers to namespace scope, therefore behaving like the old enums in that respect:

```
namespace my_lib {

enum class errcode {
  SUCCESS = 0,
  ENOMEM = 1,
  EAGAIN = 2,
  ETOOSLOW = 3
};
using enum errcode; // import enumerators into namespace

}

namespace NS {

my_lib::errcode get_widget() {
  using namespace my_lib;
  return ETOOSLOW; // works, and conversions to int don't.
}

}
```

Switching with no syntax overhead {#no-prefix-switches}
-------------------------------------------------------

The proposal allows for importing enums inside the switch body, which is a scope, and using them for labels:

```cpp
enum class rgba_color_channel { red, green, blue, alpha};

std::string_view to_string(rgba_color_channel channel) {
  switch (my_channel) {
    using enum rgba_color_channel;
    case red:   return "red";
    case green: return "green";
    case blue:  return "blue";
    case alpha: return "alpha";
  }
}
```


Adding ADL-only Functions to Enumerations:
------------------------------------------

The proposal allows for adding ADL-only functions to enumerations without enumerators (supported now) and enumerators (currently not supported):

```cpp
namespace ns {
  struct E_detail {
    enum E {
      e1 
    };
    friend void swap(E&, E&);  // adl-only swap in the only associated scope of the enum
  };
  using E = E_detail::E;  // import E into ns
  using enum E;           // expose the enumerators of E in ns. Also note the direct reference to E.
}

int main() {
  auto x = ns::e1;
  auto y = ns::e2;
  swap(x, y); // finds the swap in the associated struct
}
```

This example was slightly modified from Eric Niebler's on the <i>lib</i> mailing list when trying to find a way to make `std::begin` and `std::end` CPOs in a backwards-compatible fashion.


Frequently Asked Questions {#faq}
==========================

Has this been implemented? {#faq-impl}
--------------------------------------

Yes. The author has an implementation in clang. It has not been reviewed or released yet, however. There do not seem to be major issues with implementation. In particular, the `using ENUM::IDENTIFIER` syntax literally entailed removing a condition from an if-statement, and that was it.


Can I do this with unscoped enums? {#faq-old-enum}
-----------------------------------

Yes. The motivation for that is the pattern

```cpp
class foo {
   enum bar {
     A,
     B,
     C
   };
};
```

which was superceeded by scoped enums. With the feature this paper proposes one can bring `A`, `B` and `C` into the local scope by invoking:

```cpp
using enum ::foo::bar;
```


Are you proposing mirroring the namespace alias syntax as well? {#faq-ns-alias}
-------------------------------------------------------------------------------

No. We already have a way to do that, and it looks like this:

```cpp
using my_alias = my::name_space::enum_name;
```

In addition, [[P0945R0]] proposes deprecating namespace aliases in favor of generalized `using name = id_expression`, so doing this would go counter the current movement of the standard.


Why not allow `using enum struct/class ENUM_ID;`? {#faq-using-enum-struct}
--------------------------------------------------------------------------

Because would have been a needless complication and would introduce another layer of "`struct` and `class` don't match" linter errors that current `class`es and `struct`s already have with forward declarations.


Why propose `using ENUM_ID::IDENTIFIER` at all? {#faq-using-decl-why}
---------------------------------------------------------------------

... given that the following already works:

```cpp
  constexpr auto red = rgba_color_channel::red;
```

and that, given [[P0945R0]], this will work:

```cpp
  using red = rgba_color_channel::red;
```

The reason is "DRY" - don't repeat yourself - one is forced to repeat the name of the enumerator. That said, the authors are perfectly willing to throw this part of the paper out if the `using enum ENUM_ID` piece gets consensus and this is the stumbling block.


Clarifications for Special Cases
================================

This section lists additional clarifications that may help inform the the wording.

[namespace.udecl] p3
---------------------

Interplays with [namespace.udecl] p10:

```cpp
enum E { x };
struct S {
    enum H { y };
    enum class K { z };
    using E::x; // OK, introduces x into S
    using E::x; // error, redeclaration in class scope
    using H::y; // error, redeclaration in class scope
    using K::z; // OK, introduces z into S
};
```

In declarative regions which do allow multiple declarations, however:

```cpp
enum E { x };
namespace NS {
    enum H { y };
    enum class K { z };
    using E::x; // OK, introduces x into NS
    using E::x; // OK, just a redeclaration of the same entity
    using H::y; // OK, redeclaration of the same entity
    using K::z; // OK, introduces z into NS
};
```

[namespace.udecl] p8
---------------------

This change is meant to allow the introduction of class members that are enumerators into non-class scope. Consider this example:

```cpp
struct S {
    enum E { x };
    enum class EC { y };
    using EC::y;
};

void f() {
    using S::x; // OK
    x; // resolves to S::E::x;
    using S::y; // OK
    y; // resolves to S::EC::y;
}
```

Commas in the using declaration
-------------------------------

Since the grammar of the using declaration is not changed, it is valid to import multiple enumerators at the same time:

```cpp
enum class E { a, b, c };
using E::a, E::b, E::c; // OK, imports all three.
```

Commas in the <i>using-enum-declaration</i>
-------------------------------------------

Since "using namespace" does not allow them, this paper did not propose allowing the listing of several enumeration names in the *using-enum-declaration*.

Names *using-enum-declaration* introduces
----------------------------------

The *using-enum-declaration* only introduces the names of the enumerators into the declarative region where it appears. It does not introduce the name of the enumeration it names.

Example:
```
struct B {
    enum class E { x };
};
enum class H { y };
struct C : B {
    using enum B::E; // OK, introduces E::x into C
    using enum H; // OK, introduces y into C. Does not introduce H.
};
```

Proposed Wording {#wording}
===========================

Preface {#wording-preface}
------------------

The idea is that the identifiers appear as if they were declared in the declarative region where the *using-enum-declaration* appears, and not model the using-directive's "enclosing namespace" wording.

All wording is relative to the working draft of the ISO/IEC IS 14882: N4765, though, as it is almost entirely additive, it is also a valid diff to N8000.

Changes {#wording-changes}
-------------------------

Under [namespace.udecl]:

3. In a <i>using-declaration</i> used as a <i>member-declaration</i>, each <i>using-declarator</i><del>'s</del> <ins>shall either name an enumerator or have a</ins> <i>nested-name-specifier</i> <del>shall name</del> <ins>naming</ins> a base class of the class being defined. <ins>[Note:</ins><div class='ins'> Example: 
```
enum class button { up, down };
struct S {
   using button::up;
   button b = up; // OK
};
```
-- end note]

</div>

<del>7. A <i>using-declaration</i> shall not name a scoped enumerator.</del>

8. A <i>using-declaration</i> that names a class member <ins>other than an enumerator</ins> shall be a <i>member-declaration</i>.

Under [dcl.dcl], in [dcl.enum], add subclause titled "Using Enum Declaration", with the stable reference "[enum.udecl]".

<div class='ins'>
<i>using-enum-declaration:</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;<tt>using </tt><i>elaborated-enum-specifier</i> ;

1. The <i>elaborated-enum-specifier</i> shall not name a dependent type and the type shall have a reachable <i>enum-specifier</i>.
2. A <i>using-enum-declaration</i> introduces the enumerator names of the named enumeration as if by a <i>using-declaration</i> for each enumerator.

[Note: A <i>using-enum-declaration</i> in class scope adds the enumerators of the named enumeration as members to the scope. This means they are accessible for member lookup. Example:
```
enum class fruit { orange, apple };
struct S {
  using enum fruit; // OK, introduces orange, apple into S
};
void f() {
  S s;
  s.orange; // OK, names fruit::orange.
  S::orange; // OK, names fruit::orange.
}
```

Two <i>using-enum-declaration</i>s that introduce two enumerators of the same name are in conflict:
```
enum class fruit { orange, apple };
enum class color { red, orange };
void f() {
  using enum fruit; // OK
  using enum color; // error, color::orange and fruit::orange conflict.
}
```
-- end note]

</div>

Under [basic.def], add (just after <i>using-directive</i>)  (and renumber section):
<div class='ins'>
2.17. &mdash; it is a <i>using-enum-declaration</i>

</div>

In [dcl.dcl], under <i>block-declaration</i>:

<i>block-declaration</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;[...]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<i>using-declaration</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<ins><i>using-enum-declaration</i></ins><br/>

In [class.mem], under <i>member-declaration</i>:

<i>member-declaration</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;[...]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<i>using-declaration</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<ins><i>using-enum-declaration</i></ins><br/>

In [dcl.type.elab]:

<i>elaborated-type-specifier:</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;[...]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<del><tt>enum</tt> <i>nested-name-specifier<sub>opt</sub> identifier</i></del><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<ins><i>elaborated-enum-specifier</i></ins>

<i class='ins'>elaborated-enum-specifier:</i><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<ins><tt>enum</tt> <i>nested-name-specifier<sub>opt</sub> identifier</i></ins><br/>

To table 17 (Feature-test macros), add the feature test macro:

<table>
<tr><th>Name</th><th>Value</th></tr>
<tr><td><ins>`__cpp_using_enum`</ins></td><td><ins>PLACEHOLDER DATE</ins></td></tr>
</table>

The PLACEHOLDER DATE should be replaced with the appropriate integral constant of type long.


Acknowledgements {#ack}
================

(Alphabetically, by first name)

- Barry Revzin: feedback on R0
- BSI C++ WG: feedback throughout the life of the process
- Casey Carter: realization that this proposal allows adding adl-only functions to enumerations, typography feedback.
- CWG for their help with wording
- Dan Saks: early feedback, encouragement, quotation at start
- Eric Niebler: for the example of adl-only functions for enumerations.
- Graham Haynes: feedback on R0, and suggesting examples
- Jeff Snyder: feedback, championing with EWG
- Jens Maurer: wording feedback, the change to *using-enum-declaration*, and the encouragement to add the feature-test macro and split out the *elaborated-enum-specifier* from the other *elaborated-type-specifier*s, edge cases.
- Lisa Lippincott: early feedback on preprint.
- Marcel Ebmer: early feedback on preprint.
- Richard Smith: change design to direct injection of names, why enum names must not be dependent types, and a lot of help with wording. The initial wording without Richard's involvement would have been much, much worse.
- Roger Orr: championing with CWG, and the button example in namespace.udir
- Tomas Puverle: encouragement to extend to regular `enum`s, and other feedback

<!--
 vim: ft=markdown wrap linebreak nolist textwidth=0 wrapmargin=0
-->
